" preload gita#feature#browse which might not loaded automatically in
" travis.org because most of tests are skipped
call gita#preload('gita#features#browse')

Describe gita#features#browse
  let prefix = 'https://github.com/lambdalisue/vim-gita/blob/.*'

  Context #exec([{options}, {config}])
    It should return urls of specifield files
      if $TRAVIS ==# 'true'
        Skip The test cannot be executed on Travis
      else
        let ret = gita#features#browse#exec({
              \ '--': ['README.md', 'LICENSE.md'],
              \})
        Assert Equals(ret.status, 0)
        Assert Match(ret.urls[0], printf('%s/README.md', prefix))
        Assert Match(ret.urls[1], printf('%s/LICENSE.md', prefix))
      endif
    End
  End

  Context #open([{options}, {config}])
    It should open system browser to show urls of specifield files
      Assert True(exists('*gita#features#browse#open'))
      Skip It is not possible to test this behavior
    End
  End

  Context #yank([{options}, {config}])
    It should yank the last url of the specified files
      if $TRAVIS ==# 'true'
        Skip The test cannot be executed on Travis
      else
        call gita#features#browse#yank({
              \ '--': ['README.md', 'LICENSE.md'],
              \})
        Assert Match(@", printf('%s/LICENSE.md', prefix))
      endif
    End

    if has('clipboard') && $TRAVIS !=# 'true'
      It should yank the last url of the specified files to clipboard as well
        call gita#features#browse#yank({
              \ '--': ['README.md', 'LICENSE.md'],
              \})
        Assert Match(
              \ getreg(v:register),
              \ printf('%s/LICENSE.md', prefix)
              \)
      End
    endif
  End

  Context #echo([{options}, {config}])
    It should echo urls of the specified files
      if $TRAVIS ==# 'true'
        Skip The test cannot be executed on Travis
      else
        redir => contents
        call gita#features#browse#echo({
              \ '--': ['README.md', 'LICENSE.md'],
              \})
        redir END
        let lines = split(contents, "\n")
        Assert Match(lines[0], printf('%s/README.md', prefix))
        Assert Match(lines[1], printf('%s/LICENSE.md', prefix))
      endif
    End
  End

  Context #command({bang}, {range}[, {cmdline}])
    It should automatically call a correct method
      Assert True(exists('*gita#features#browse#command'))
      Skip It is difficult to test this behavior
    End
  End

  Context #complete({arglead}, {cmdline}, {cursorpos})
    It should call ArgumentParser.complete function
      Assert True(exists('*gita#features#browse#complete'))
      Skip It is not possible to access script local variable
    End
  End

  Context #translate_url({url}, {translate_patterns}, {options})
    It should be able to translate Github (https://github.com/) urls
      let patterns = [
            \ 'https://github.com/%s/%s',
            \ 'git://github.com/%s/%s',
            \ 'git@github.com:%s/%s',
            \ 'ssh://git@github.com/%s/%s',
            \ 'https://github.com/%s/%s.git',
            \ 'git://github.com/%s/%s.git',
            \ 'git@github.com:%s/%s.git',
            \ 'ssh://git@github.com/%s/%s.git',
            \]
      let pairs = [
            \ ['lambdalisue', 'vim-gita'],
            \ ['vim-jp', 'vital.vim'],
            \]
      for pattern in patterns
        for [user, repo] in pairs
          let url = gita#features#browse#translate_url(
                \ printf(pattern, user, repo),
                \ g:gita#features#browse#translation_patterns,
                \ {},
                \)
          Assert Match(
                \ url,
                \ printf('^https://github.com/%s/%s/blob', user, repo),
                \)
        endfor
      endfor
    End

    It should be able to translate bitbucket (https://bitbucket.org/) urls
      let patterns = [
            \ 'https://bitbucket.org/%s/%s',
            \ 'git://bitbucket.org/%s/%s',
            \ 'git@bitbucket.org:%s/%s',
            \ 'ssh://git@bitbucket.org/%s/%s',
            \ 'https://bitbucket.org/%s/%s.git',
            \ 'git://bitbucket.org/%s/%s.git',
            \ 'git@bitbucket.org:%s/%s.git',
            \ 'ssh://git@bitbucket.org/%s/%s.git',
            \]
      let pairs = [
            \ ['lambdalisue', 'vim-gita'],
            \ ['vim-jp', 'vital.vim'],
            \]
      for pattern in patterns
        for [user, repo] in pairs
          let url = gita#features#browse#translate_url(
                \ printf(pattern, user, repo),
                \ g:gita#features#browse#translation_patterns,
                \ {},
                \)
          Assert Match(
                \ url,
                \ printf('^https://bitbucket.org/%s/%s/src', user, repo),
                \)
        endfor
      endfor
    End
  End
End

