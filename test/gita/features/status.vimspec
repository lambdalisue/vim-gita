Describe gita#features#status
  Before
    new
    let gita = gita#get()
    let gita.git.cache.repository.clear()
    let operations_saved = deepcopy(gita.operations)

    function! gita.operations.status(...) abort
      call add(self._previous_args, a:000)
      return {
            \ 'status': 0,
            \ 'stdout': join([
            \   'M  foo.md',
            \   ' M bar.md',
            \   'UU hoge.md',
            \ ], "\n"),
            \}
    endfunction
    let gita.operations._previous_args = []
  End

  After
    let gita.operations = operations_saved
    call WipeoutAll()
  End

  Context #open({options})
    It should open gita:status (monitor) window
      call gita#features#status#open({
            \})
      " It should call gita.operations.diff internally
      Assert Equals(gita.operations._previous_args[0], [{
            \ 'porcelain': 1,
            \}, {
            \ 'echo': 'fail',
            \ 'force_update': 1,
            \}])

      " the buffer should follow
      Assert Equals(bufname('%'), 'gita:status')
      Assert Equals(&modifiable, 0)
      Assert Equals(&readonly, 1)
      Assert Equals(&filetype, 'gita-status')
    End

    It should open a window with correct contents
      call gita#features#status#open({})
      " the buffer content should follow
      let contents = getline(1, '$')
      Assert Match(contents[0], '^# Press ?m and/or ?s to toggle a help')
      Assert Match(contents[1], '^# Index and working tree status on a branch')
      Assert Match(contents[2], '^M  foo\.md$')
      Assert Match(contents[3], '^ M bar\.md$')
      Assert Match(contents[4], '^UU hoge\.md$')
    End

    It should open a window with correct gita actions
      call gita#features#status#open({})
      " the opened buffer should contain actions
      Assert KeyExists(b:, '_gita_actions')
      Assert KeyExists(b:_gita_actions, 'open')
      Assert KeyExists(b:_gita_actions, 'edit')
      Assert KeyExists(b:_gita_actions, 'diff')
      Assert KeyExists(b:_gita_actions, 'update')
      Assert KeyExists(b:_gita_actions, 'open_commit')
      Assert KeyExists(b:_gita_actions, 'add')
      Assert KeyExists(b:_gita_actions, 'rm')
      Assert KeyExists(b:_gita_actions, 'reset')
      Assert KeyExists(b:_gita_actions, 'checkout')
      Assert KeyExists(b:_gita_actions, 'stage')
      Assert KeyExists(b:_gita_actions, 'unstage')
      Assert KeyExists(b:_gita_actions, 'toggle')
      Assert KeyExists(b:_gita_actions, 'discard')
      Assert KeyExists(b:_gita_actions, 'solve')
    End

  End

  Context #update({options})
    It should update contents of gita:status window
      let w:_gita_options = {}
      call gita#features#status#update()
      " the buffer content should follow
      let contents = getline(1, '$')
      Assert Match(contents[0], '^# Press ?m and/or ?s to toggle a help')
      Assert Match(contents[1], '^# Index and working tree status on a branch')
      Assert Match(contents[2], '^M  foo\.md$')
      Assert Match(contents[3], '^ M bar\.md$')
      Assert Match(contents[4], '^UU hoge\.md$')
    End

    It should update w:_gita_statuses_map
      let w:_gita_options = {}
      call gita#features#status#update()
      Assert KeyExists(w:, '_gita_statuses_map')
      Assert Equals(len(w:_gita_statuses_map), 3)
    End
  End

  " TODO Add behavior tests of actions
End
