Describe gita#features#file
  Before
    let gita = gita#get()
    let operations_saved = deepcopy(gita.operations)

    function! gita.operations.show(...) abort
      let self._previous_args = a:000
      return {
            \ 'status': 0,
            \ 'stdout': 'CONTENTS',
            \}
    endfunction
    function! gita.operations.merge_base(...) abort
      return {
            \ 'status': 0,
            \ 'stdout': 'COMMON-ANCESTOR',
            \}
    endfunction
    let gita.operations._previous_args = []
  End

  After
    let gita.operations = operations_saved
  End

  Context #exec([{options}, {config}])
    It should return a contents of file in worktree if WORKTREE is specified
      let ret = gita#features#file#exec({
            \ 'commit': 'WORKTREE',
            \ 'file': 'README.md',
            \})
      Assert Equals(ret.status, 0)
      Assert Equals(ret.stdout, join(readfile('README.md'), "\n"))
    End

    It should return a contents of file in index if INDEX is specified
      let ret = gita#features#file#exec({
            \ 'commit': 'INDEX',
            \ 'file': 'README.md',
            \})
      " it should call gita.operations.show to obtain contents
      Assert Equals(gita.operations._previous_args, [{
            \ 'object': ':README.md',
            \}, {}])
    End

    It should return a contents of file of a common ancestor if commit1...commit2 is specified
      let ret = gita#features#file#exec({
            \ 'commit': 'commit1...commit2',
            \ 'file': 'README.md',
            \})
      " it should call gita.operations.merge_base to obtain a common ancestor
      " and should call gita.operations.show to obtain the contents
      Assert Equals(gita.operations._previous_args, [{
            \ 'object': 'COMMON-ANCESTOR:README.md',
            \}, {}])
    End

    It should return error message if commit range is specified
      let ret = gita#features#file#exec({
            \ 'commit': 'commit1..commit2',
            \ 'file': 'README.md',
            \})
      Assert Equals(ret.status, -1)
      Assert Match(ret.stdout, '\vA commit range')
    End

    It should NOT call gita.operations.show at all if commit is WORKTREE
      call gita#features#file#exec({
            \ 'file': 'README.md',
            \ 'commit': 'WORKTREE',
            \})
      Assert Equals(gita.operations._previous_args, [])
    End
  End

  Context #exec_cached([{options}, {config}])
    It should NOT call gita.operations.show for 2nd call with same options
      call gita#features#file#exec_cached({
            \ 'file': 'README.md',
            \ 'commit': 'HEAD',
            \})
      let gita.operations._previous_args = []
      call gita#features#file#exec_cached({
            \ 'file': 'README.md',
            \ 'commit': 'HEAD',
            \})
      Assert Equals(gita.operations._previous_args, [])
    End

    It should call gita.operations.show for 2nd call with different options
      call gita#features#file#exec_cached({
            \ 'file': 'README.md',
            \ 'commit': 'HEAD',
            \})
      let gita.operations._previous_args = []
      call gita#features#file#exec_cached({
            \ 'file': 'README.md',
            \ 'commit': 'INDEX',
            \})
      Assert Equals(gita.operations._previous_args, [{
            \ 'object': ':README.md',
            \}, {}])
    End

  End

  Context #show([{options}, {config}])
    It should open a file in worktree if WORKTREE is specified
      call gita#features#file#show({
            \ 'commit': 'WORKTREE',
            \ 'file': 'README.md',
            \})
      Assert Equals(bufname('%'), 'README.md')
      Assert Equals(getline(0, '$'), readfile('README.md'))
      Assert Equals(gita#meta#get('commit'), 'WORKTREE')
    End

    It should open a file in index if INDEX is specified
      call gita#features#file#show({
            \ 'commit': 'INDEX',
            \ 'file': 'README.md',
            \})
      " it should call gita.operations.show to obtain contents
      Assert Equals(bufname('%'), 'INDEX:README.md')
      Assert Equals(getline(0, '$'), ['CONTENTS'])
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md')
            \)
      Assert Equals(gita#meta#get('commit'), 'INDEX')
    End

    It should open a file of a common ancestor if commit1...commit2 is specified
      call gita#features#file#show({
            \ 'commit': 'commit1...commit2',
            \ 'file': 'README.md',
            \})
      " it should call gita.operations.show to obtain contents
      Assert Equals(bufname('%'), 'commit1...commit2:README.md')
      Assert Equals(getline(0, '$'), ['CONTENTS'])
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md')
            \)
      Assert Equals(gita#meta#get('commit'), 'commit1...commit2')
    End
  End
End
