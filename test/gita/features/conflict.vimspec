Describe gita#features#conflict
  Before
    edit README.md
    let gita = gita#get()
    let gita.git.cache.repository.clear()
    let operations_saved = deepcopy(gita.operations)

    function! gita.operations.show(...) abort
      call add(self._previous_args, a:000)
      let options = get(a:000, 0, {})
      let object  = get(options, 'object', '')
      if object =~# '^:2'
        return {
              \ 'status': 0,
              \ 'stdout': 'OUR CONTENTS',
              \}
      elseif object =~# '^:3'
        return {
              \ 'status': 0,
              \ 'stdout': 'THEIR CONTENTS',
              \}
      else
        return {
              \ 'status': 0,
              \ 'stdout': 'CONTENTS',
              \}
      endif
    endfunction
    let gita.operations._previous_args = []
  End

  After
    let gita.operations = operations_saved
    call WipeoutAll()
  End

  Context #show([{options}, {config}])
    It should open two buffers for solve conflict with --split=2
      call gita#features#conflict#show({
            \ 'split': 2,
            \ 'file': 'README.md',
            \})
      " it should execute gita.operations.show internally
      Assert Equals(gita.operations._previous_args[0], [{
            \ 'object': ':2:README.md',
            \}, { 'echo': '' }])
      Assert Equals(gita.operations._previous_args[1], [{
            \ 'object': ':3:README.md',
            \}, { 'echo': '' }])
      " check the buffer (LOCAL)
      Assert Equals(bufname('%'), gita#utils#buffer#bufname(
            \ 'LOCAL', 'README.md'
            \))
      Assert Equals(getline(0, '$'), ['OUR CONTENTS'])
      Assert Equals(&l:buftype, 'acwrite')
      Assert Equals(&l:modifiable, 1)
      Assert Equals(&l:readonly, 0)
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md'),
            \)

      " check the buffer (REMOTE)
      wincmd p
      Assert Equals(bufname('%'), gita#utils#buffer#bufname(
            \ 'REMOTE', 'README.md'
            \))
      Assert Equals(getline(0, '$'), ['THEIR CONTENTS'])
      Assert Equals(&l:buftype, 'nofile')
      Assert Equals(&l:modifiable, 0)
      Assert Equals(&l:readonly, 1)
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md'),
            \)
    End

    It should open three buffers for solve conflict with --split=3
      call gita#features#conflict#show({
            \ 'split': 3,
            \ 'file': 'README.md',
            \})
      " it should execute gita.operations.show internally
      Assert Equals(gita.operations._previous_args[0], [{
            \ 'object': ':2:README.md',
            \}, { 'echo': '' }])
      Assert Equals(gita.operations._previous_args[1], [{
            \ 'object': ':3:README.md',
            \}, { 'echo': '' }])
      " check the buffer (MERGE)
      Assert Equals(bufname('%'), gita#utils#buffer#bufname(
            \ 'MERGE', 'README.md'
            \))
      Assert Equals(getline(0, '$'), readfile('README.md'))
      Assert Equals(&l:buftype, 'acwrite')
      Assert Equals(&l:modifiable, 1)
      Assert Equals(&l:readonly, 0)
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md'),
            \)

      " check the buffer (LOCAL)
      execute printf('%dwincmd w', bufwinnr(b:_gita_LOCAL_bufnum))
      Assert Equals(bufname('%'), gita#utils#buffer#bufname(
            \ 'LOCAL', 'README.md'
            \))
      Assert Equals(getline(0, '$'), ['OUR CONTENTS'])
      Assert Equals(&l:buftype, 'nofile')
      Assert Equals(&l:modifiable, 0)
      Assert Equals(&l:readonly, 1)
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md'),
            \)

      " check the buffer (REMOTE)
      execute printf('%dwincmd w', bufwinnr(b:_gita_REMOTE_bufnum))
      Assert Equals(bufname('%'), gita#utils#buffer#bufname(
            \ 'REMOTE', 'README.md'
            \))
      Assert Equals(getline(0, '$'), ['THEIR CONTENTS'])
      Assert Equals(&l:buftype, 'nofile')
      Assert Equals(&l:modifiable, 0)
      Assert Equals(&l:readonly, 1)
      Assert Equals(
            \ gita#meta#get('filename'),
            \ gita#utils#ensure_abspath('README.md'),
            \)
    End
  End

End
