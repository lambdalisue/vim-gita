Describe gita#monitor
  After
    call WipeoutAll()
  End

  Context #open({bufname}[, {options}, {config}])
    It should open a buffer with {bufname}
      call gita#monitor#open('foo')
      Assert Equals(bufname('%'), 'foo')
    End

    It should properly prepare a monitor buffer
      call gita#monitor#open('foo')
      " settings
      Assert Equals(&buftype, 'nofile')
      Assert Equals(&bufhidden, 'hide')
      Assert Equals(&buflisted, 0)
      Assert Equals(&winfixwidth, 1)
      Assert Equals(&winfixheight, 1)
      " window/buffer variables
      Assert True(has_key(w:, '_gita'))
      Assert True(has_key(w:, '_gita_options'))
      Assert True(has_key(w:, '_gita_statuses_map'))
      Assert True(has_key(b:, '_gita_constructed'))
      " autocmd
      Assert True(exists('#vim-gita-monitor'))
      if exists('#QuitPre')
        Assert True(exists('#vim-gita-monitor#QuitPre'))
      endif
      Assert True(exists('#vim-gita-monitor#WinLeave'))
    End

    It should return a dictionary
      let ret1 = gita#monitor#open('foo')
      let ret2 = gita#monitor#open('foo')

      Assert Equals(ret1.status, 0)
      Assert Equals(ret1.constructed, 0)
      Assert Equals(ret1.loaded, 1)
      Assert Equals(ret1.bufnum, bufnr('%'))

      Assert Equals(ret2.status, 0)
      Assert Equals(ret2.constructed, 1)
      Assert Equals(ret2.loaded, 0)
      Assert Equals(ret2.bufnum, bufnr('%'))
    End
  End

  Context #define_mappings()
    It should define <Plug> mappings
      call gita#monitor#define_mappings()
      Assert False(empty(mapcheck('<Plug>(gita-action-quit)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-help-s)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-edit)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-edit-h)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-edit-v)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-open)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-open-h)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-open-v)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-diff)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-diff-h)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-diff-v)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-DIFF-h)')))
      Assert False(empty(mapcheck('<Plug>(gita-action-DIFF-v)')))
    End
  End

  Context #define_default_mappings()
    It should define actual mappings
      call gita#monitor#define_default_mappings()
      Assert Equals(maparg('q'), '<Plug>(gita-action-quit)')
      Assert Equals(maparg('?s'), '<Plug>(gita-action-help-s)')
      Assert Match(maparg('ee'), '<Plug>(gita-action-edit)')
      Assert Match(maparg('eh'), '<Plug>(gita-action-edit-h)')
      Assert Match(maparg('ev'), '<Plug>(gita-action-edit-v)')
      Assert Match(maparg('eE'), '<Plug>(gita-action-edit-v)')
      Assert Match(maparg('EE'), '<Plug>(gita-action-edit-v)')
      Assert Match(maparg('oo'), '<Plug>(gita-action-open)')
      Assert Match(maparg('oh'), '<Plug>(gita-action-open-h)')
      Assert Match(maparg('ov'), '<Plug>(gita-action-open-v)')
      Assert Match(maparg('oO'), '<Plug>(gita-action-open-v)')
      Assert Match(maparg('OO'), '<Plug>(gita-action-open-v)')
      Assert Match(maparg('dd'), '<Plug>(gita-action-diff)')
      Assert Match(maparg('dh'), '<Plug>(gita-action-diff-h)')
      Assert Match(maparg('dv'), '<Plug>(gita-action-diff-v)')
      Assert Match(maparg('dD'), '<Plug>(gita-action-DIFF-v)')
      Assert Match(maparg('dH'), '<Plug>(gita-action-DIFF-h)')
      Assert Match(maparg('dV'), '<Plug>(gita-action-DIFF-v)')
      Assert Match(maparg('DD'), '<Plug>(gita-action-DIFF-v)')
      Assert Match(maparg('DH'), '<Plug>(gita-action-DIFF-h)')
      Assert Match(maparg('DV'), '<Plug>(gita-action-DIFF-v)')
    End
  End
End
