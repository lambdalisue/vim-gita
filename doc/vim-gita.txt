*vim-gita.txt*      An awesome Git manipulation plugin

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>		*vim-gita-author*
Support: Vim 7.4 and above
License: MIT license

    Copyright (c) 2014 Alisue, hashnote.net

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=============================================================================
CONTENTS					*vim-gita-contents*

Introduction			|vim-gita-introduction|
Install				|vim-gita-install|
Usage				|vim-gita-usage|
  Statusline			|vim-gita-usage-statusline|
Interface			|vim-gita-interface|
  Commands			|vim-gita-interface-commands|
  Functions			|vim-gita-interface-functions|
  Variables			|vim-gita-interface-variables|
  Mappings			|vim-gita-interface-mappings|

==============================================================================
INTRODUCTION					*vim-gita-introduction*

				WARNING

vim-gita is under development status (alpha version), mean that there would be
critical bugs for daily usage.
Any features, options, mechanisms, etc. might be replaced/removed without any
announcements, mean that you should wait to contribute.


*vim-gita* is a git manipulation plugin which was strongly inspired by
tpope/vim-fugitive, thnca/vim-vcs, Shougo/vim-vcs, and lambdalisue/vim-gista.

Core functions and features are powerd by vim-jp/vital.vim and its external
modules, mean that the fundemental functions are well tested in unittest level
and vim-gita can focus to provide a user-friendly interface.

vim-gita use a git repository which a current buffer belongs (not like
vim-fugitive which use a current working directory and that leads a wrong
git repository recognition). You may notice it is quite useful when you
temporary open a file which belongs to a different git repository.

Additionally, vim-gita aggressively use cache mechanisms, mean that the
response speed of your Vim might be improved, especially if you are using
vim-fugitive or a raw git command (|system()|) to show a current status in
the statusline.

References:
- tpope/vim-fugitive
  https://github.com/tpope/vim-fugitive
- thinca/vim-vcs
  https://github.com/thinca/vim-vcs
- Shougo/vim-vcs
  https://github.com/Shougo/vim-vcs
- lambdalisue/vim-gista
  https://github.com/lambdalisue/vim-gista
- vim-jp/vital.vim
  https://github.com/vim-jp/vital.vim
- lambdalisue/vital-ArgumentParser
  https://github.com/lambdalisue/vital-ArgumentParser
- lambdalisue/vital-VCS-Git
  https://github.com/lambdalisue/vital-VCS-Git


==============================================================================
INSTALL						*vim-gita-install*

The repository (https://github.com/lambdalisue/vim-gita) follow a standard
directory structure thus you can use Vundle.vim, neobundle.vim, or other vim
plugin manager to install |vim-gita| like:
>
	" Vundle.vim
	Plugin 'lambdalisue/vim-gita'

	" neobundle.vim
	NeoBundle 'lambdalisue/vim-gita'

	" neobundle.vim (Lazy)
	NeoBundleLazy 'lambdalisue/vim-gita', {
		\ 'autoload': {
		\   'commands': ['Gita'],
		\}}
<
If you are not using any vim plugin manager, you can copy the repository to
your $VIM directory to enable the plugin.


==============================================================================
USAGE						*vim-gita-usage*

First of all, all commands which vim-gita provides start from :Gita and all
commands (including :Gita) provide --help/-h option to show a help message of
the command. Like below
>
	:Gita -h
	:Gita[!] [action] [--help]

	An awesome git handling plugin for Vim

	Positional arguments:
	action      An action of the Gita or git command.
		If a non Gita command is specified or a command is called...
		it call a raw git command instead of a Gita command.

	Optional arguments:
	-h, --help  show this help
<

To stage/commit changes, follow the steps below:

	1. Hit ':Gita stage' to open a |gita:status| window
	2. Hit '--' to stage/unstage file(s) under the cursor
	3. Hit 'cc' to swithc to a |gita:commit| window
	4. Write a commit message and hit ':wq'
	5. Answer 'y' to commit changes


To list files changed from a master (like 'Files changed' in GitHub PR),
follow the steps below:

	1. Hit ':Gita diff-ls' to open a |gita:diff-ls| window
	2. Answer 'master...' to list files changed from a common ancestor
	3. Hit 'ee', 'oo' or whatever to open the file


To solve conflicts in merge mode, follow the steps below:

	1. Hit ':Gita stage' to open a |gita:status| window
	2. Hit 'ss', 'sS', or 'SS' to open |vimdiff|
	3. Compare difference and write a correct version
	4. Hit ':Gita add' on a MERGE buffer
	5. Hit ':Gita commit' to open a |gita:commit| window
	6. Write a commit message and hit ':wq' to commit the changes

See |vim-gita-interface| for more documents.

------------------------------------------------------------------------------
STATUSLINE					*vim-gita-usage-statusline*

vim-gita provides a statusline component (|gita#statusline#format()|) which
cache a current status aggressively to enhance the performance. It would
improve the performance a lot if you are using |system()| to call a raw git
command currently.

Use |gita#statusline#preset()| to get a preset or |gita#statusline#format()| to
create your own component.
>
	" Example usage of gita#statusline#preset()
	echo gita#statusline#preset('branch')
	" out: vim-gita/master <> origin/master
	echo gita#statusline#preset('status')
	" out: !5 +2 "4 *4
	echo gita#statusline#preset('traffic')
	" out: <5 >4

	" Example usage of gita#statusline#format()
	echo gita#statusline#format('%ln/%lb # %rn/%rb')
	" out: vim-gita/master # origin/master
<
vim-gita just provides statusline |String| so you would require to use some
other statusline plugin such as itchyny/lightline.vim.  The following is my
tabline setting via itchyny/lightline.vim
>
	let g:lightline = {
	      \ 'colorscheme': 'hybrid',
	      \ 'active': {
	      \   'left': [
	      \     [ 'mode', 'paste' ],
	      \     [ 'filename' ],
	      \   ],
	      \   'right': [
	      \     [ 'lineinfo' ],
	      \     [ 'fileformat', 'fileencoding', 'filetype' ],
	      \   ],
	      \ },
	      \ 'inactive': {
	      \   'left': [
	      \     [ 'filename' ],
	      \   ],
	      \   'right': [
	      \     [ 'fileformat', 'fileencoding', 'filetype' ],
	      \   ],
	      \ },
	      \ 'tabline': {
	      \   'left': [
	      \     [ 'tabs' ],
	      \   ],
	      \   'right': [
	      \     [ 'close' ],
	      \     [ 'git_branch', 'git_traffic', 'git_status', 'cwd' ],
	      \   ],
	      \ },
	      \ 'component_visible_condition': {
	      \   'lineinfo': '(winwidth(0) >= 70)',
	      \ },
	      \ 'component_function': {
	      \   'git_branch': 'g:lightline.my.git_branch',
	      \   'git_traffic': 'g:lightline.my.git_traffic',
	      \   'git_status': 'g:lightline.my.git_status',
	      \ },
	      \}
	let g:lightline.my = {}
	function! g:lightline.my.git_branch() " {{{
	  return gita#statusline#preset('branch') : ''
	endfunction " }}}
	function! g:lightline.my.git_traffic() " {{{
	  return gita#statusline#preset('traffic') : ''
	endfunction " }}}
	function! g:lightline.my.git_status() " {{{
	  return gita#statusline#preset('status') : ''
	endfunction " }}}
<
Reference:
- itchyny/lightline.vim 
  https://github.com/itchyny/lightline.vim


==============================================================================
INTERFACE					*vim-gita-interface*

------------------------------------------------------------------------------
COMMANDS					*vim-gita-interface-commands*

:Gita status {options}			*:Gita-status*

	Open a *gita:status* window which you can see and manipulate the
	status of a git repository which a current buffer belongs.

	See :Gita status -h for the help of {options}.

:Gita commit {options}			*:Gita-commit*

	Open a *gita:commit* window which you can edit and post the changes to
	a git repository which a current buffer belongs.

	See :Gita commit -h for the help of {options}

NOTE: WIP

------------------------------------------------------------------------------
FUNCTIONS					*vim-gita-interface-functions*

gita#statusline#format({format})		*gita#statusline#format()*

	Return a current git status in a specified {format}. The following
	format strings are available to use in the {format}.

	'ln' A working tree name
	'lb' A current branch name
	'rn' A connected remote name (usually 'origin')
	'rb' A connected remote branch name (usually 'master')
	'ic' The number of incoming commits (commits behind remote)
	'og' The number of outgoing commits (commits ahead of remote)
	'nc' The number of conflicted files
	'nu' The number of unstaged files
	'ns' The number of staged files
	'na' The number of added files to index
	'nd' The number of deleted files from index
	'nr' The number of renamed files in index
	'nm' The number of modified files in index

	And the following rules are applied to the {format}.

	1. If a format string is leaded by %, the '%' and the format string
	   will be translated into a corresponding informations.
	   E.g: '%rb' -> 'master' or ''
	2. If a format string is leaded by %{left|}, the '%{left|}' and the
	   format string will be translated into a corresponding informations
	   and 'left' will be inserted at left side of the translation if the
	   translation is not an empty string.
	   E.g: '%{#}rb' -> '#master' or ''
	3. If a format string is leaded by %{|right}, the '%{|right}' and the
	   format string will be translated into a corresponding informations
	   and 'right' will be inserted at right side of the translation if the
	   translation is not an empty string.
	   E.g: '%{|$}rb' -> 'master$' or ''
	4. If a format string is leaded by %{left|right}, the '%{left|right}'
	   and the format string will be translated into a corresponding
	   informations and 'left' and 'right' will be inserted at left and
	   right side of the translation respectively if the translation is not
	   an empty string.
	   E.g: '%{#|$}rb' -> '#master$' or ''

	See the following examples to get a image.
>
	echo gita#statusline#format('%{|/}ln%lb%{ <> |}rn%{/|}rb')

	" ln: vim-gita
	" lb: develop
	" rn: origin
	" rb: master
	" => vim-gita/develop <> origin/master

	" ln: vim-gita
	" lb: develop
	" rn: origin
	" rb:
	" => vim-gita/develop <> origin

	" ln: vim-gita
	" lb: develop
	" rn: 
	" rb: master
	" => vim-gita/develop/master

	" ln: vim-gita
	" lb: 
	" rn: origin
	" rb: master
	" => vim-gita/ <> origin/master

	" ln: 
	" lb: develop
	" rn: origin
	" rb: master
	" => develop <> origin/master
<
gita#statusline#preset({name})		*gita#statusline#preset()*

	Return a formatted string of following presets, specified by {name}.
	Let me know if you create a nice preset :-)

	'branch'
	Local and remote branch information
	E.g: vim-gita/develop <> origin/master

	'branch_fancy'
	Local and remote branch information with fancy font
	E.g: ⭠ vim-gita/develop ⇄ origin/master

	'status'
	Show the number of conflicted (!), added (+), deleted (-), renamed ("),
	modified (*), and unstaged (@) files
	E.g: !3 +4 -5 "3 *2 @4

	'traffic'
	Show the number of incoming/outgoing commits
	E.g: <4 >5

	'traffic_fancy'
	Show the number of incoming/outgoing commits with fancy font
	E.g: ￩3 ￫5

NOTE: WIP

------------------------------------------------------------------------------
VARIABLES					*vim-gita-interface-variables*

g:gita#debug					*g:gita#debug*

	If it is 1, debug messages will be shown.
	The default is 0.

			*g:gita#features#browse#translation_patterns*
g:gita#features#browse#translation_patterns

	A |List| of |List| used for translating a remote url to browserble
	url. See |g:gita#features#browse#extra_translation_patterns| for the
	detail.

			*g:gita#features#browse#extra_translation_patterns*
g:gita#features#browse#extra_translation_patterns

	An extra translation pattern |List| which will be added to
	|g:gita#features#browse#translation_patterns|.
	Each list item must be a |List| which have two or three |String|.
	The first string is a URL pattern used as {pat} attribute of
	|substitute()|. The second and third (optional) string are substitution
	pattern which is used as {sub} attribute of |substitute()|.
	The third string is used when --exact option is specified. If the
	pattern does not have the third string, the second string will be used
	even in that case.

	After substitution, the following format string are replaced by
	a rule which explained in |gita#statusline#format()| part.

	'lb' A local branch name. It might not exist in the remote.
	'lh' A local branch hash. It might not exist in the remote.
	'rb' A remote branch name which the current branch is connected.
	'rh' A remote branch hash which the current branch is connected.
	'pt' A relative file path from a top of git working tree
	'ls' A start line number of selection
	'le' A end line number of selection

	Example: Add a pattern for GitLab
>
	let g:gita#features#browse#extra_translation_patterns = [
	    \ ['\vgit@(gitlab\.hashnote\.net):([^/]+)/(.+)%(\.git|)',
	    \  'http://\1/\2/\3/blob/%rb/%pt%{#L|}ls%{-}le',
	    \  'http://\1/\2/\3/blob/%rh/%pt%{#L|}ls%{-}le'],
	    \ ['\vhttps?://(gitlab\.hashnote\.net):([^/]+)/(.+)',
	    \  'http://\1/\2/\3/blob/%rb/%pt%{#L|}ls%{-}le',
	    \  'http://\1/\2/\3/blob/%rh/%pt%{#L|}ls%{-}le'],
	    \]
<
NOTE: WIP

------------------------------------------------------------------------------
MAPPINGS					*vim-gita-interface-mappings*

NOTE: WIP


vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
